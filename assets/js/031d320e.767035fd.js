"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[27],{766:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var n=i(5893),r=i(1151);const o={},s="Future",a={id:"Architecture/Future",title:"Future",description:"What's next?",source:"@site/docs/9-Architecture/Future.md",sourceDirName:"9-Architecture",slug:"/Architecture/Future",permalink:"/golangci-test/docs/Architecture/Future",draft:!1,unlisted:!1,editUrl:"https://github.com/fridaybyte/golangci-test/tree/main/packages/create-docusaurus/templates/shared/docs/9-Architecture/Future.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gitlab Integration",permalink:"/golangci-test/docs/CI Integration/gitlab"}},l={},c=[{value:"What&#39;s next?",id:"whats-next",level:2},{value:"Highest Priority",id:"highest-priority",level:3},{value:"Eventual refactor of merge tools",id:"eventual-refactor-of-merge-tools",level:3}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"future",children:"Future"}),"\n",(0,n.jsx)(t.h2,{id:"whats-next",children:"What's next?"}),"\n",(0,n.jsx)(t.h3,{id:"highest-priority",children:"Highest Priority"}),"\n",(0,n.jsxs)(t.p,{children:["First of all, ",(0,n.jsx)(t.code,{children:"golangci-test"})," intends to be stable and reliable tool.\nThis is why the highest priority will always be catching and fixing\nany bugs that would stand in a way of including ",(0,n.jsx)(t.code,{children:"golangci-test"})," in\nproduction pipelines."]}),"\n",(0,n.jsx)(t.p,{children:"New features will always have lower priority and their implementation\nshould be preceded with careful reasoning and thinking of all edge\ncases."}),"\n",(0,n.jsx)(t.h3,{id:"eventual-refactor-of-merge-tools",children:"Eventual refactor of merge tools"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://go.dev/blog/integration-test-coverage",children:"Go 1.20 introduced"})," a\nfew great tools focused on integration testing.\nIncluding a tool, that enables merging coverage profiles.\nUnfortunately, it supports only new coverage format,\nwhile there is no way (production-ready) way to generate it for\nstandard unit tests without building test executable and using\nunexported (unofficial) flags,\n",(0,n.jsx)(t.a,{href:"https://github.com/golang/go/issues/51430#issuecomment-1344711300",children:"read more here"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Development of these features is definitely worth observing as it\ncould replace custom code with the built-in tools (officially\nsupported tools)"})]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);